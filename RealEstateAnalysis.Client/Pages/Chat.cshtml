@page
@model RealEstateAnalysis.Client.Pages.ChatModel
@{
    ViewData["Title"] = "Chat with EstateBot";
}

<div class="chat-container">
    <h1>EstateBot</h1>
    <form method="post" class="chat-form" id="chatForm" autocomplete="off" onsubmit="showLoading()">
        <div class="chat-history" id="chatHistory">
            @foreach (var msg in Model.ChatHistory)
            {
                <div class="chat-message @(msg.role == "user" ? "user-message" : "bot-message")">
                    <span class="role">@((msg.role == "user") ? "You" : "Bot"):</span>
                    <span class="content">@msg.content</span>
                </div>
            }
            <div id="loadingIndicator" style="display:none;">
                <div class="chat-message bot-message">
                    <span class="role">Bot:</span>
                    <span class="content"><em>Thinking<span class="dot-1">.</span><span class="dot-2">.</span><span class="dot-3">.</span></em></span>
                </div>
            </div>
        </div>
        <input type="hidden" name="ChatHistory" id="ChatHistoryField" value='@System.Text.Json.JsonSerializer.Serialize(Model.ChatHistory)' />
        <div class="chat-input-group">
            <input type="text" name="UserMessage" id="UserMessage" value="@Model.UserMessage" class="form-control chat-input" placeholder="Type your message..." autocomplete="off" />
            <button type="submit" class="btn btn-primary" id="sendBtn">Send</button>
            <button type="submit" name="clear" value="1" class="btn btn-secondary">Clear Chat</button>
        </div>
    </form>
    @if (Model.SuggestedProperties?.Count > 0)
    {
        <div class="suggested-properties">
            <h3>Might interest you</h3>
            <div class="property-list">
                @foreach (var prop in Model.SuggestedProperties)
                {
                    <div class="property-card">
                        <a asp-page="/PropertyDetails" asp-route-id="@prop.Id">
                            <img src="@Url.Content(prop.FirstImage ?? "~/images/noimage.png")" alt="Property Image" class="img-thumbnail" />
                            <div class="property-info">
                                <strong>@prop.Name</strong><br />
                                @prop.Country<br />
                                <span class="price">@prop.Price.ToString("C")</span>
                            </div>
                        </a>
                    </div>
                }
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
    function showLoading() {
        const loading = document.getElementById('loadingIndicator');
        const input = document.getElementById('UserMessage');
        const chatHistory = document.getElementById('chatHistory');
        const message = input.value.trim();

        if (message) {
            const msgDiv = document.createElement("div");
            msgDiv.className = "chat-message user-message";
            msgDiv.innerHTML = `
                <span class="role">You:</span>
                <span class="content">${escapeHtml(message)}</span>
            `;
            chatHistory.insertBefore(msgDiv, loading);
        }

        if (loading) {
            loading.style.display = '';
        }
    }

    function escapeHtml(text) {
        return text.replace(/[&<>"']/g, function (m) {
            return ({
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#039;'
            })[m];
        });
    }

    window.addEventListener('DOMContentLoaded', function () {
        const loading = document.getElementById('loadingIndicator');
        const input = document.getElementById('UserMessage');
        const sendBtn = document.getElementById('sendBtn');

        if (loading) loading.style.display = 'none';
        if (input) input.disabled = false;
        if (sendBtn) sendBtn.disabled = false;

        // Razor re-renders input after post, so clear it
        if (input) input.value = '';
    });
</script>
}

<style>
    .chat-container {
        max-width: 900px;
        min-width: 400px;
        min-height: 600px;
        margin: 50px auto 40px auto;
        background: #fafdff;
        border-radius: 18px;
        box-shadow: 0 4px 32px rgba(0,0,0,0.09);
        padding: 40px 40px 30px 40px;
        display: flex;
        flex-direction: column;
    }
    .chat-container h1 {
        text-align: center;
        font-size: 2.2rem;
        margin-bottom: 30px;
        color: #2c3e50;
        letter-spacing: 1px;
    }
    .chat-history {
        max-height: 420px;
        min-height: 320px;
        overflow-y: auto;
        margin-bottom: 25px;
        border: 1.5px solid #e0e7ef;
        border-radius: 12px;
        padding: 22px;
        background: #f3f7fa;
        font-size: 1.13rem;
        box-shadow: 0 1px 6px rgba(0,0,0,0.04);
    }
    .chat-message {
        margin-bottom: 16px;
        padding: 10px 16px;
        border-radius: 10px;
        display: flex;
        align-items: baseline;
        font-size: 1.08rem;
        word-break: break-word;
    }
    .user-message {
        background: #e3fcec;
        align-self: flex-end;
        justify-content: flex-end;
        border-bottom-right-radius: 2px;
        border-top-right-radius: 16px;
    }
    .bot-message {
        background: #e0e7ef;
        align-self: flex-start;
        justify-content: flex-start;
        border-bottom-left-radius: 2px;
        border-top-left-radius: 16px;
    }
    .chat-message .role {
        font-weight: bold;
        margin-right: 10px;
        color: #007bff;
        min-width: 48px;
    }
    .chat-input-group {
        display: flex;
        gap: 12px;
        margin-bottom: 10px;
        align-items: center;
    }
    .chat-input-group input[type="text"].chat-input {
        flex: 1;
        font-size: 1.1rem;
        padding: 12px 14px;
        border-radius: 8px;
        border: 1.5px solid #b9c6d3;
        background: #fff;
        transition: border 0.2s;
    }
    .chat-input-group input[type="text"].chat-input:focus {
        border: 1.5px solid #007bff;
        outline: none;
    }
    .chat-input-group button {
        padding: 10px 22px;
        font-size: 1.08rem;
        border-radius: 8px;
        font-weight: 600;
    }
    .suggested-properties {
        margin-top: 35px;
        background: #f8fafc;
        border-radius: 10px;
        padding: 22px;
        box-shadow: 0 1px 8px rgba(0,0,0,0.05);
    }
    .suggested-properties h3 {
        margin-bottom: 18px;
        color: #2c3e50;
        font-size: 1.3rem;
        font-weight: 600;
    }
    .property-list {
        display: flex;
        flex-wrap: wrap;
        gap: 22px;
    }
    .property-card {
        width: 200px;
        background: #fff;
        border: 1.5px solid #e0e7ef;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0,0,0,0.04);
        text-align: center;
        transition: box-shadow 0.2s;
    }
    .property-card:hover {
        box-shadow: 0 6px 24px rgba(0,0,0,0.13);
    }
    .property-card img {
        width: 100%;
        height: 120px;
        object-fit: cover;
        border-bottom: 1px solid #e0e7ef;
    }
    .property-info {
        padding: 12px 8px;
    }
    .property-info .price {
        color: #28a745;
        font-weight: bold;
        font-size: 1.08rem;
    }
    /* Animated loading dots */
    .dot-1, .dot-2, .dot-3 {
        opacity: 0.3;
        animation: blink 1.4s infinite both;
    }
    .dot-2 { animation-delay: 0.2s; }
    .dot-3 { animation-delay: 0.4s; }
    @@keyframes blink {
        0%, 80%, 100% { opacity: 0.3; }
        40% { opacity: 1; }
    }
</style>
