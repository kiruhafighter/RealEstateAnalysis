//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    registerUser(request: AddUserDto): Promise<void> {
        let url_ = this.baseUrl + "/users/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegisterUser(_response);
        });
    }

    protected processRegisterUser(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            result500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as number;
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    loginUser(request: UserLoginDto): Promise<TokenDto> {
        let url_ = this.baseUrl + "/users/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoginUser(_response);
        });
    }

    protected processLoginUser(response: Response): Promise<TokenDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as TokenDto;
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TokenDto>(null as any);
    }

    getUserDetails(): Promise<UserDetailsDto> {
        let url_ = this.baseUrl + "/users/my-profile";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUserDetails(_response);
        });
    }

    protected processGetUserDetails(response: Response): Promise<UserDetailsDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as UserDetailsDto;
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserDetailsDto>(null as any);
    }

    updateUserDetails(request: UpdateUserInfoDto): Promise<void> {
        let url_ = this.baseUrl + "/users/my-profile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateUserDetails(_response);
        });
    }

    protected processUpdateUserDetails(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            result500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as number;
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getAgentProfileForUser(): Promise<AgentDetailsDto> {
        let url_ = this.baseUrl + "/agents/my-profile";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAgentProfileForUser(_response);
        });
    }

    protected processGetAgentProfileForUser(response: Response): Promise<AgentDetailsDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as AgentDetailsDto;
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AgentDetailsDto>(null as any);
    }

    updateAgentInfoForUser(agentDto: UpdateAgentDto): Promise<void> {
        let url_ = this.baseUrl + "/agents/my-profile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(agentDto);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateAgentInfoForUser(_response);
        });
    }

    protected processUpdateAgentInfoForUser(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            result500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as number;
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getAgentAccountDetails(agentId: string): Promise<AgentDetailsDto> {
        let url_ = this.baseUrl + "/agents/{agentId}";
        if (agentId === undefined || agentId === null)
            throw new Error("The parameter 'agentId' must be defined.");
        url_ = url_.replace("{agentId}", encodeURIComponent("" + agentId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAgentAccountDetails(_response);
        });
    }

    protected processGetAgentAccountDetails(response: Response): Promise<AgentDetailsDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as AgentDetailsDto;
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AgentDetailsDto>(null as any);
    }

    addAgentAccount(agentDto: AddAgentDto): Promise<void> {
        let url_ = this.baseUrl + "/agents";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(agentDto);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddAgentAccount(_response);
        });
    }

    protected processAddAgentAccount(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            result500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as number;
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getPropertiesFiltered(pageNumber: number, pageSize: number, name: string | null | undefined, address: string | null | undefined, county: string | null | undefined, country: string | null | undefined, locality: string | null | undefined, propertyTypeId: number | null | undefined, numberOfRooms: number | null | undefined, numberOfFloors: number | null | undefined, minYearBuilt: number | null | undefined, maxYearBuilt: number | null | undefined, minPlotArea: number | null | undefined, maxPlotArea: number | null | undefined, minFloorArea: number | null | undefined, maxFloorArea: number | null | undefined, minPrice: number | null | undefined, maxPrice: number | null | undefined): Promise<CollectionResultOfPropertyListedDto> {
        let url_ = this.baseUrl + "/properties/filter?";
        if (pageNumber === undefined || pageNumber === null)
            throw new Error("The parameter 'pageNumber' must be defined and cannot be null.");
        else
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === undefined || pageSize === null)
            throw new Error("The parameter 'pageSize' must be defined and cannot be null.");
        else
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (name !== undefined && name !== null)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (address !== undefined && address !== null)
            url_ += "Address=" + encodeURIComponent("" + address) + "&";
        if (county !== undefined && county !== null)
            url_ += "County=" + encodeURIComponent("" + county) + "&";
        if (country !== undefined && country !== null)
            url_ += "Country=" + encodeURIComponent("" + country) + "&";
        if (locality !== undefined && locality !== null)
            url_ += "Locality=" + encodeURIComponent("" + locality) + "&";
        if (propertyTypeId !== undefined && propertyTypeId !== null)
            url_ += "PropertyTypeId=" + encodeURIComponent("" + propertyTypeId) + "&";
        if (numberOfRooms !== undefined && numberOfRooms !== null)
            url_ += "NumberOfRooms=" + encodeURIComponent("" + numberOfRooms) + "&";
        if (numberOfFloors !== undefined && numberOfFloors !== null)
            url_ += "NumberOfFloors=" + encodeURIComponent("" + numberOfFloors) + "&";
        if (minYearBuilt !== undefined && minYearBuilt !== null)
            url_ += "MinYearBuilt=" + encodeURIComponent("" + minYearBuilt) + "&";
        if (maxYearBuilt !== undefined && maxYearBuilt !== null)
            url_ += "MaxYearBuilt=" + encodeURIComponent("" + maxYearBuilt) + "&";
        if (minPlotArea !== undefined && minPlotArea !== null)
            url_ += "MinPlotArea=" + encodeURIComponent("" + minPlotArea) + "&";
        if (maxPlotArea !== undefined && maxPlotArea !== null)
            url_ += "MaxPlotArea=" + encodeURIComponent("" + maxPlotArea) + "&";
        if (minFloorArea !== undefined && minFloorArea !== null)
            url_ += "MinFloorArea=" + encodeURIComponent("" + minFloorArea) + "&";
        if (maxFloorArea !== undefined && maxFloorArea !== null)
            url_ += "MaxFloorArea=" + encodeURIComponent("" + maxFloorArea) + "&";
        if (minPrice !== undefined && minPrice !== null)
            url_ += "MinPrice=" + encodeURIComponent("" + minPrice) + "&";
        if (maxPrice !== undefined && maxPrice !== null)
            url_ += "MaxPrice=" + encodeURIComponent("" + maxPrice) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPropertiesFiltered(_response);
        });
    }

    protected processGetPropertiesFiltered(response: Response): Promise<CollectionResultOfPropertyListedDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as CollectionResultOfPropertyListedDto;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CollectionResultOfPropertyListedDto>(null as any);
    }

    getPropertyDetails(propertyId: string): Promise<PropertyDetailsDto> {
        let url_ = this.baseUrl + "/properties/{propertyId}";
        if (propertyId === undefined || propertyId === null)
            throw new Error("The parameter 'propertyId' must be defined.");
        url_ = url_.replace("{propertyId}", encodeURIComponent("" + propertyId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPropertyDetails(_response);
        });
    }

    protected processGetPropertyDetails(response: Response): Promise<PropertyDetailsDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as PropertyDetailsDto;
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PropertyDetailsDto>(null as any);
    }

    getAgentProperties(agentId: string): Promise<PropertyListedDto[]> {
        let url_ = this.baseUrl + "/agents/{agentId}/properties";
        if (agentId === undefined || agentId === null)
            throw new Error("The parameter 'agentId' must be defined.");
        url_ = url_.replace("{agentId}", encodeURIComponent("" + agentId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAgentProperties(_response);
        });
    }

    protected processGetAgentProperties(response: Response): Promise<PropertyListedDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as PropertyListedDto[];
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PropertyListedDto[]>(null as any);
    }

    addProperty(addPropertyDto: AddPropertyDto): Promise<void> {
        let url_ = this.baseUrl + "/properties";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(addPropertyDto);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddProperty(_response);
        });
    }

    protected processAddProperty(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            result500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as number;
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    updateProperty(updatePropertyDto: UpdatePropertyDto): Promise<void> {
        let url_ = this.baseUrl + "/properties";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updatePropertyDto);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateProperty(_response);
        });
    }

    protected processUpdateProperty(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            result500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as number;
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getAveragePricesForPeriod(name: string | null | undefined, address: string | null | undefined, county: string | null | undefined, country: string | null | undefined, locality: string | null | undefined, propertyTypeId: number | null | undefined, numberOfRooms: number | null | undefined, numberOfFloors: number | null | undefined, minYearBuilt: number | null | undefined, maxYearBuilt: number | null | undefined, minPlotArea: number | null | undefined, maxPlotArea: number | null | undefined, minFloorArea: number | null | undefined, maxFloorArea: number | null | undefined, minPrice: number | null | undefined, maxPrice: number | null | undefined, startYear: number, startMonth: number, endYear: number, endMonth: number): Promise<AveragePriceForMonth[]> {
        let url_ = this.baseUrl + "/properties/average-prices?";
        if (name !== undefined && name !== null)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (address !== undefined && address !== null)
            url_ += "Address=" + encodeURIComponent("" + address) + "&";
        if (county !== undefined && county !== null)
            url_ += "County=" + encodeURIComponent("" + county) + "&";
        if (country !== undefined && country !== null)
            url_ += "Country=" + encodeURIComponent("" + country) + "&";
        if (locality !== undefined && locality !== null)
            url_ += "Locality=" + encodeURIComponent("" + locality) + "&";
        if (propertyTypeId !== undefined && propertyTypeId !== null)
            url_ += "PropertyTypeId=" + encodeURIComponent("" + propertyTypeId) + "&";
        if (numberOfRooms !== undefined && numberOfRooms !== null)
            url_ += "NumberOfRooms=" + encodeURIComponent("" + numberOfRooms) + "&";
        if (numberOfFloors !== undefined && numberOfFloors !== null)
            url_ += "NumberOfFloors=" + encodeURIComponent("" + numberOfFloors) + "&";
        if (minYearBuilt !== undefined && minYearBuilt !== null)
            url_ += "MinYearBuilt=" + encodeURIComponent("" + minYearBuilt) + "&";
        if (maxYearBuilt !== undefined && maxYearBuilt !== null)
            url_ += "MaxYearBuilt=" + encodeURIComponent("" + maxYearBuilt) + "&";
        if (minPlotArea !== undefined && minPlotArea !== null)
            url_ += "MinPlotArea=" + encodeURIComponent("" + minPlotArea) + "&";
        if (maxPlotArea !== undefined && maxPlotArea !== null)
            url_ += "MaxPlotArea=" + encodeURIComponent("" + maxPlotArea) + "&";
        if (minFloorArea !== undefined && minFloorArea !== null)
            url_ += "MinFloorArea=" + encodeURIComponent("" + minFloorArea) + "&";
        if (maxFloorArea !== undefined && maxFloorArea !== null)
            url_ += "MaxFloorArea=" + encodeURIComponent("" + maxFloorArea) + "&";
        if (minPrice !== undefined && minPrice !== null)
            url_ += "MinPrice=" + encodeURIComponent("" + minPrice) + "&";
        if (maxPrice !== undefined && maxPrice !== null)
            url_ += "MaxPrice=" + encodeURIComponent("" + maxPrice) + "&";
        if (startYear === undefined || startYear === null)
            throw new Error("The parameter 'startYear' must be defined and cannot be null.");
        else
            url_ += "StartYear=" + encodeURIComponent("" + startYear) + "&";
        if (startMonth === undefined || startMonth === null)
            throw new Error("The parameter 'startMonth' must be defined and cannot be null.");
        else
            url_ += "StartMonth=" + encodeURIComponent("" + startMonth) + "&";
        if (endYear === undefined || endYear === null)
            throw new Error("The parameter 'endYear' must be defined and cannot be null.");
        else
            url_ += "EndYear=" + encodeURIComponent("" + endYear) + "&";
        if (endMonth === undefined || endMonth === null)
            throw new Error("The parameter 'endMonth' must be defined and cannot be null.");
        else
            url_ += "EndMonth=" + encodeURIComponent("" + endMonth) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAveragePricesForPeriod(_response);
        });
    }

    protected processGetAveragePricesForPeriod(response: Response): Promise<AveragePriceForMonth[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as AveragePriceForMonth[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AveragePriceForMonth[]>(null as any);
    }

    addOffer(offerDto: AddOfferDto): Promise<void> {
        let url_ = this.baseUrl + "/offers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(offerDto);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddOffer(_response);
        });
    }

    protected processAddOffer(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            result500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as number;
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    updateOffer(offerDto: UpdateOfferDto): Promise<void> {
        let url_ = this.baseUrl + "/offers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(offerDto);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateOffer(_response);
        });
    }

    protected processUpdateOffer(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            result500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as number;
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getOfferDetails(offerId: string): Promise<OfferDetailsDto> {
        let url_ = this.baseUrl + "/offers/{offerId}";
        if (offerId === undefined || offerId === null)
            throw new Error("The parameter 'offerId' must be defined.");
        url_ = url_.replace("{offerId}", encodeURIComponent("" + offerId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOfferDetails(_response);
        });
    }

    protected processGetOfferDetails(response: Response): Promise<OfferDetailsDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as OfferDetailsDto;
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OfferDetailsDto>(null as any);
    }

    deleteOffer(offerId: string): Promise<void> {
        let url_ = this.baseUrl + "/offers/{offerId}";
        if (offerId === undefined || offerId === null)
            throw new Error("The parameter 'offerId' must be defined.");
        url_ = url_.replace("{offerId}", encodeURIComponent("" + offerId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteOffer(_response);
        });
    }

    protected processDeleteOffer(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            result500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as number;
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getOffersForUser(): Promise<OfferListedDto[]> {
        let url_ = this.baseUrl + "/offers/my-offers";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOffersForUser(_response);
        });
    }

    protected processGetOffersForUser(response: Response): Promise<OfferListedDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as OfferListedDto[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OfferListedDto[]>(null as any);
    }

    getOffersByPropertyId(propertyId: string): Promise<OfferListedDto[]> {
        let url_ = this.baseUrl + "/properties/{propertyId}/offers";
        if (propertyId === undefined || propertyId === null)
            throw new Error("The parameter 'propertyId' must be defined.");
        url_ = url_.replace("{propertyId}", encodeURIComponent("" + propertyId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOffersByPropertyId(_response);
        });
    }

    protected processGetOffersByPropertyId(response: Response): Promise<OfferListedDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as OfferListedDto[];
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OfferListedDto[]>(null as any);
    }

    getUserOffersForProperty(propertyId: string): Promise<OfferListedDto[]> {
        let url_ = this.baseUrl + "/properties/{propertyId}/offers/my-offers";
        if (propertyId === undefined || propertyId === null)
            throw new Error("The parameter 'propertyId' must be defined.");
        url_ = url_.replace("{propertyId}", encodeURIComponent("" + propertyId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUserOffersForProperty(_response);
        });
    }

    protected processGetUserOffersForProperty(response: Response): Promise<OfferListedDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as OfferListedDto[];
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OfferListedDto[]>(null as any);
    }

    acceptOffer(offerId: string): Promise<void> {
        let url_ = this.baseUrl + "/offers/{offerId}/accept";
        if (offerId === undefined || offerId === null)
            throw new Error("The parameter 'offerId' must be defined.");
        url_ = url_.replace("{offerId}", encodeURIComponent("" + offerId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PATCH",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAcceptOffer(_response);
        });
    }

    protected processAcceptOffer(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            result500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as number;
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    rejectOffer(offerId: string): Promise<void> {
        let url_ = this.baseUrl + "/offers/{offerId}/reject";
        if (offerId === undefined || offerId === null)
            throw new Error("The parameter 'offerId' must be defined.");
        url_ = url_.replace("{offerId}", encodeURIComponent("" + offerId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PATCH",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRejectOffer(_response);
        });
    }

    protected processRejectOffer(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            result500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as number;
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    addImageForProperty(propertyId: string, imageAddInfo: AddImageDto): Promise<void> {
        let url_ = this.baseUrl + "/properties/{propertyId}/images";
        if (propertyId === undefined || propertyId === null)
            throw new Error("The parameter 'propertyId' must be defined.");
        url_ = url_.replace("{propertyId}", encodeURIComponent("" + propertyId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(imageAddInfo);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddImageForProperty(_response);
        });
    }

    protected processAddImageForProperty(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            result500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as number;
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    deleteImageForProperty(propertyId: string, imageId: number): Promise<void> {
        let url_ = this.baseUrl + "/properties/{propertyId}/images/{imageId}";
        if (propertyId === undefined || propertyId === null)
            throw new Error("The parameter 'propertyId' must be defined.");
        url_ = url_.replace("{propertyId}", encodeURIComponent("" + propertyId));
        if (imageId === undefined || imageId === null)
            throw new Error("The parameter 'imageId' must be defined.");
        url_ = url_.replace("{imageId}", encodeURIComponent("" + imageId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteImageForProperty(_response);
        });
    }

    protected processDeleteImageForProperty(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            result500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as number;
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    addUsersFavourite(propertyId: string): Promise<void> {
        let url_ = this.baseUrl + "/favourites";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(propertyId);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddUsersFavourite(_response);
        });
    }

    protected processAddUsersFavourite(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            result500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as number;
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getUsersFavourites(): Promise<void> {
        let url_ = this.baseUrl + "/favourites";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUsersFavourites(_response);
        });
    }

    protected processGetUsersFavourites(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    removeUsersFavourite(usersFavouriteId: number): Promise<void> {
        let url_ = this.baseUrl + "/favourites/{usersFavouriteId}";
        if (usersFavouriteId === undefined || usersFavouriteId === null)
            throw new Error("The parameter 'usersFavouriteId' must be defined.");
        url_ = url_.replace("{usersFavouriteId}", encodeURIComponent("" + usersFavouriteId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRemoveUsersFavourite(_response);
        });
    }

    protected processRemoveUsersFavourite(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            result500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as number;
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export interface AddUserDto {
    email?: string;
    firstName?: string;
    lastName?: string;
    password?: string;
    confirmPassword?: string;
}

export interface TokenDto {
    accessToken?: string;
    accessTokenExpiryTime?: Date;
}

export interface UserLoginDto {
    email?: string;
    password?: string;
}

export interface UserDetailsDto {
    id?: string;
    email?: string;
    firstName?: string;
    lastName?: string;
}

export interface UpdateUserInfoDto {
    email?: string;
    firstName?: string;
    lastName?: string;
}

export interface AgentDetailsDto {
    id?: string;
    firstName?: string;
    lastName?: string;
    email?: string;
    phoneNumber?: string;
    agencyName?: string | undefined;
    userId?: string;
}

export interface AddAgentDto {
    firstName?: string;
    lastName?: string;
    email?: string;
    phoneNumber?: string;
    agencyName?: string | undefined;
}

export interface UpdateAgentDto {
    firstName?: string;
    lastName?: string;
    email?: string;
    phoneNumber?: string;
    agencyName?: string | undefined;
}

export interface CollectionResultOfPropertyListedDto {
    data?: PropertyListedDto[];
    totalCount?: number;
}

export interface PropertyListedDto {
    id?: string;
    name?: string;
    country?: string;
    propertyType?: string;
    yearBuilt?: number | undefined;
    floorArea?: number;
    price?: number;
    propertyStatus?: string;
    firstImage?: string | undefined;
}

export interface PropertyDetailsDto {
    id?: string;
    name?: string;
    address?: string;
    description?: string;
    county?: string;
    country?: string;
    locality?: string;
    postcode?: string;
    propertyTypeId?: number;
    propertyTypeName?: string;
    numberOfRooms?: number;
    numberOfFloors?: number | undefined;
    yearBuilt?: number | undefined;
    plotArea?: number | undefined;
    floorArea?: number;
    price?: number;
    propertyStatusId?: number;
    propertyStatusName?: string;
    agent?: AgentDetailsDto;
    images?: ImageListedDto[];
}

export interface ImageListedDto {
    id?: number;
    propertyId?: string;
    imagePath?: string;
}

export interface AddPropertyDto {
    name?: string;
    address?: string;
    description?: string;
    county?: string;
    country?: string;
    locality?: string;
    postcode?: string;
    propertyTypeId?: number;
    numberOfRooms?: number;
    numberOfFloors?: number | undefined;
    yearBuilt?: number | undefined;
    plotArea?: number | undefined;
    floorArea?: number;
    price?: number;
    propertyStatusId?: number;
    images?: AddImageDto[];
}

export interface AddImageDto {
    imagePath?: string;
}

export interface UpdatePropertyDto {
    id?: string;
    name?: string;
    address?: string;
    description?: string;
    county?: string;
    country?: string;
    locality?: string;
    postcode?: string;
    propertyTypeId?: number;
    numberOfRooms?: number;
    numberOfFloors?: number | undefined;
    yearBuilt?: number | undefined;
    plotArea?: number | undefined;
    floorArea?: number;
    price?: number;
    propertyStatusId?: number;
}

export interface AveragePriceForMonth {
    year?: number;
    month?: number;
    averagePrice?: number;
}

export interface AddOfferDto {
    propertyId?: string;
    offerAmount?: number;
    comment?: string | undefined;
}

export interface OfferDetailsDto {
    id?: string;
    propertyId?: string;
    propertyName?: string;
    offerAmount?: number;
    offerDate?: Date;
    offerStatusId?: number;
    offerStatusName?: string;
    comment?: string | undefined;
    userId?: string;
    userFullName?: string;
    userEmail?: string;
}

export interface OfferListedDto {
    id?: string;
    propertyId?: string;
    propertyName?: string;
    offerAmount?: number;
    offerDate?: Date;
    offerStatusId?: number;
    offerStatusName?: string;
    userEmail?: string;
}

export interface UpdateOfferDto {
    id?: string;
    offerAmount?: number;
    comment?: string | undefined;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}